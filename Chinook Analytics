/*
For this project, The Chinook Data Set (.db file) was used in SQLite.
The inquiries used below are examples of potential questions to consider when analyzing raw data. 
This example showcases my thought process when looking into data and performing SQL commands to retrieve the necessary information.

Skills used: Joins, Alias, Aggregate Functions, Concatenation
*/

-- I explored the data and how the data tables are related (where they can join, for example) using SQL:
/*
SELECT * FROM chinook.employees LIMIT 5
*/

-- Then, I began answering questions about the data.


-- #1 Show Customers (their customer ID, full names, and country) who are not in the United States.
/*
SELECT CustomerID, FirstName, LastName, Country 
FROM chinook.customers
WHERE Country != "USA";
*/

-- #2 Show only the Customers from Brazil.
/*
SELECT CustomerID, FirstName, LastName, Country FROM chinook.customers
WHERE Country = "Brazil";
*/

-- #3 Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
/*
SELECT a.FirstName || ' ' || a.LastName AS "Customer Name", b.InvoiceID, b.InvoiceDate, b.BillingCountry FROM chinook.customers a
JOIN chinook.invoices b
ON a.CustomerID = b.CustomerID;
*/

-- BONUS: Take the above a step further & separate the column InvoiceDate into 2 Separate Columns: Date and Time.
/*
SELECT a.FirstName, a.LastName, b.InvoiceID, b.InvoiceDate, DATE(b.InvoiceDate) AS "Invoice Dates", TIME(b.InvoiceDate) AS "Invoice Times", b.BillingCountry FROM chinook.customers a
JOIN chinook.invoices b
ON a.CustomerID = b.CustomerID
WHERE b.BillingCountry = "Brazil"
ORDER BY a.FirstName ASC;
*/

-- The following SQL Query demonstrates how I compared the InvoiceDate Data by whether the follow-on code matched the specific data in the InvoiceData column.
/*
SELECT b.InvoiceDate, DATE(b.invoiceDate), TIME(b.invoiceDate)
FROM chinook.customers a
    JOIN chinook.invoices b
    ON a.CustomerID = b.CustomerID
ORDER BY b.InvoiceDate ASC;
*/

-- #4 Produce a manifest of the Employees that are Sales Agents
/*
SELECT * FROM chinook.employees
WHERE Title LIKE "Sales%" AND Title LIKE "%Agent";
*/

-- #5 Find a unique list of billing countries from the Invoice table.
/*
SELECT DISTINCT BillingCountry FROM chinook.invoices;
*/

-- #6 Provide a query that shows the invoices associated with each sales agent.
/*
SELECT c.EmployeeID, c.FirstName || ' ' || c.LastName AS "Sales Rep Name", c.Title, a.InvoiceID FROM chinook.invoices a
JOIN chinook.customers b
ON a.customerid = b.customerid
JOIN chinook.employees c
ON b.SupportRepID = c.EmployeeID
WHERE c.Title = "Sales Support Agent"
ORDER BY c.LastName ASC;
*/

-- #7 Show the Invoice Total, Customer Name, Country of the Customer, and the Sales Agent name associated with the Invoice for 
-- (a) all invoices, and...
-- (b) all customers.

/*
SELECT b.FirstName || ' ' || b.LastName AS "Customer Name", b.Country AS "Customer's Country", c.FirstName || ' ' || c.LastName AS "Employee Name", 
c.Title, a.Total 
FROM chinook.invoices a
JOIN chinook.customers b
ON a.customerid = b.customerid
JOIN chinook.employees c
ON b.SupportRepID = c.EmployeeID
ORDER BY c.LastName ASC;
*/

-- #8 How many invoices were there in 2009?
/*
SELECT COUNT(*) FROM chinook.invoices 
WHERE InvoiceDate LIKE "2009%"
*/

-- Another approach...
/*
SELECT COUNT(*) AS "Invoices in 2009" FROM chinook.invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';
*/

-- #9 What are the total sales for 2009?
/*
SELECT SUM(total) FROM chinook.invoices
WHERE InvoiceDate LIKE "2009%"
*/
-- Another approach
/*
SELECT SUM(Total) AS "Total Sales in 2009" FROM chinook.invoices a
WHERE a.InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31'
*/

-- BONUS: Round off the result to 2 decimal places.
/*
SELECT ROUND(SUM(total),2) FROM chinook.invoices
WHERE InvoiceDate LIKE "2009%"
*/

-- #10 Write a query that includes the track name with each invoice line ID.
/*
SELECT i.InvoiceID AS "Invoice ID", a.Title AS "Track Name"
FROM chinook.invoice_items i
JOIN chinook.tracks t
ON t.TrackID = i.TrackID
JOIN chinook.albums a
ON a.AlbumID = t.AlbumID
*/

-- #11 Write a query that includes the track name AND artist name with each invoice line ID.
/*
SELECT i.InvoiceId, i.InvoiceLineID, a.Title AS "Song Title", z.Name AS "Artist Name" FROM chinook.invoice_items i
JOIN chinook.tracks t
ON t.TrackID = i.TrackID
JOIN chinook.albums a
ON a.AlbumID = t.AlbumID
JOIN chinook.artists z
ON z.ArtistId = a.ArtistId
ORDER BY i.InvoiceLineID ASC
*/

-- Alternate Coding
/*
SELECT i.InvoiceId, i.InvoiceLineId, ar.name AS "Artist", t.name AS "Track Name" FROM chinook.invoice_Items i
LEFT JOIN chinook.tracks t
ON i.TrackID = t.TrackID
INNER JOIN chinook.albums a
ON a.AlbumID = t.AlbumID
LEFT JOIN chinook.artists ar
ON ar.ArtistID = a.ArtistID
ORDER BY i.InvoiceLineId ASC;
*/

-- #12 Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre. 
/*
SELECT t.Name AS "Track Name", a.Title AS "Album Title", m.Name AS "Media Type", g.Name AS "Genre"  
FROM chinook.tracks t
JOIN chinook.genres g
ON t.GenreID = g.GenreID
JOIN chinook.media_types m 
ON t.MediaTypeId = m.MediaTypeId
JOIN chinook.albums a
ON t.AlbumId = a.AlbumId
*/

-- #13 Show the total sales made by each sales agent. (Include an added row that only includes a sum of the Totals column.)
/*
SELECT e.EmployeeId, e.FirstName, e.LastName, e.Title, ROUND(SUM(i.Total),2) AS "Total Sales Per Rep"
FROM chinook.invoices i
JOIN chinook.customers c
ON i.CustomerId = c.CustomerId
JOIN chinook.employees e
ON e.EmployeeId = c.SupportRepId
WHERE e.Title LIKE "Sales%" or e.Title LIKE "%Agent"
GROUP BY e.EmployeeID

UNION

SELECT ' ', ' ', ' ', ' ', ROUND(SUM(Total), 2) FROM chinook.invoices
*/

-- #14 Which sales agent made the most dollars in sales in 2009? (Include the hiring date for the employee.)
/* 
REASONING FOR WHAT TO INCLUDE IN THE REPORT: In the event the company had a sales contest that involved internal public recognition, a biographical commentary may mention something to the effect of, "This successful sales rep has been 
with the company for x amount of years." This notion seems to be a very reasonable follow-up inquiry by those who might be asking for this data, so I took this opportunity to demonstrate that I can have the forethought of including such 
information in a SELECT query.
*/

/*
SELECT 
e.EmployeeId, e.FirstName, e.LastName, e.Title, ROUND(SUM(i.Total),3) AS "Total Sales for 2009", e.HireDate 
FROM chinook.invoices i
JOIN chinook.customers c
ON i.CustomerId = c.CustomerId
JOIN chinook.employees e
ON e.EmployeeId = c.SupportRepId
WHERE i.InvoiceDate LIKE "2009%" AND e.Title = 'Sales Support Agent'
GROUP BY e.FirstName
ORDER BY ROUND(SUM(Total),2) DESC LIMIT 1
*/
